using System;
using System.Collections.Generic;

class Song
{
    public string Title { get; set; }
    public string Artist { get; set; }

    public Song(string title, string artist)
    {
        Title = title;
        Artist = artist;
    }

    public override string ToString()
    {
        return $"–ü—ñ—Å–Ω—è: {Title}, –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {Artist}";
    }
}

class MusicDisc
{
    public string Name { get; set; }
    private List<Song> songs;

    public MusicDisc(string name)
    {
        Name = name;
        songs = new List<Song>();
    }

    public void AddSong(Song song) => songs.Add(song);
    public void RemoveSong(string title) =>
        songs.RemoveAll(s => s.Title.Equals(title, StringComparison.OrdinalIgnoreCase));
    public List<Song> GetSongs() => songs;

    public override string ToString()
    {
        string result = $"–î–∏—Å–∫: {Name}\n";
        if (songs.Count == 0)
            result += "  (–Ω–µ–º–∞—î –ø—ñ—Å–µ–Ω—å)\n";
        else
            foreach (var song in songs)
                result += "  " + song + "\n";
        return result;
    }
}

class ex5
{
    private static Dictionary<string, MusicDisc> catalog = new();

    public static void Process()
    {
        while (true)
        {
            Console.WriteLine("\n–ö–∞—Ç–∞–ª–æ–≥ –º—É–∑–∏—á–Ω–∏—Ö –¥–∏—Å–∫—ñ–≤:");
            Console.WriteLine("1. –î–æ–¥–∞—Ç–∏ –¥–∏—Å–∫");
            Console.WriteLine("2. –í–∏–¥–∞–ª–∏—Ç–∏ –¥–∏—Å–∫");
            Console.WriteLine("3. –î–æ–¥–∞—Ç–∏ –ø—ñ—Å–Ω—é –Ω–∞ –¥–∏—Å–∫");
            Console.WriteLine("4. –í–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ—Å–Ω—é –∑ –¥–∏—Å–∫–∞");
            Console.WriteLine("5. –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥");
            Console.WriteLine("6. –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–∏—Å–∫");
            Console.WriteLine("7. –ü–æ—à—É–∫ –ø—ñ—Å–µ–Ω—å –≤–∏–∫–æ–Ω–∞–≤—Ü—è");
            Console.WriteLine("0. –í–∏–π—Ç–∏");
            Console.Write("–í–∞—à –≤–∏–±—ñ—Ä: ");
            string? choice = Console.ReadLine();

            switch (choice)
            {
                case "1": AddDisc(); break;
                case "2": RemoveDisc(); break;
                case "3": AddSong(); break;
                case "4": RemoveSong(); break;
                case "5": ViewCatalog(); break;
                case "6": ViewDisc(); break;
                case "7": SearchByArtist(); break;
                case "0": return;
                default: Console.WriteLine("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä."); break;
            }
        }
    }

    private static void AddDisc()
    {
        Console.Write("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–∏—Å–∫–∞: ");
        string? name = Console.ReadLine();
        if (string.IsNullOrWhiteSpace(name)) return;

        if (!catalog.ContainsKey(name))
        {
            catalog[name] = new MusicDisc(name);
            Console.WriteLine("‚úÖ –î–∏—Å–∫ –¥–æ–¥–∞–Ω–æ.");
        }
        else
        {
            Console.WriteLine("‚ö†Ô∏è –¢–∞–∫–∏–π –¥–∏—Å–∫ —É–∂–µ —ñ—Å–Ω—É—î.");
        }
    }

    private static void RemoveDisc()
    {
        Console.Write("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–∏—Å–∫–∞: ");
        string? name = Console.ReadLine();
        if (string.IsNullOrWhiteSpace(name)) return;

        if (catalog.Remove(name))
            Console.WriteLine("‚úÖ –î–∏—Å–∫ –≤–∏–¥–∞–ª–µ–Ω–æ.");
        else
            Console.WriteLine("‚ö†Ô∏è –î–∏—Å–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    }

    private static void AddSong()
    {
        Console.Write("–ù–∞ —è–∫–∏–π –¥–∏—Å–∫ –¥–æ–¥–∞—Ç–∏ –ø—ñ—Å–Ω—é? ");
        string? discName = Console.ReadLine();
        if (string.IsNullOrWhiteSpace(discName)) return;

        if (catalog.TryGetValue(discName, out MusicDisc? disc))
        {
            Console.Write("–ù–∞–∑–≤–∞ –ø—ñ—Å–Ω—ñ: ");
            string? title = Console.ReadLine();
            Console.Write("–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: ");
            string? artist = Console.ReadLine();

            if (!string.IsNullOrWhiteSpace(title) && !string.IsNullOrWhiteSpace(artist))
            {
                disc.AddSong(new Song(title, artist));
                Console.WriteLine("‚úÖ –ü—ñ—Å–Ω—é –¥–æ–¥–∞–Ω–æ.");
            }
        }
        else
        {
            Console.WriteLine("‚ö†Ô∏è –î–∏—Å–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }
    }

    private static void RemoveSong()
    {
        Console.Write("–ó —è–∫–æ–≥–æ –¥–∏—Å–∫–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ—Å–Ω—é? ");
        string? discName = Console.ReadLine();
        if (string.IsNullOrWhiteSpace(discName)) return;

        if (catalog.TryGetValue(discName, out MusicDisc? disc))
        {
            Console.Write("–ù–∞–∑–≤–∞ –ø—ñ—Å–Ω—ñ: ");
            string? title = Console.ReadLine();
            if (!string.IsNullOrWhiteSpace(title))
            {
                disc.RemoveSong(title);
                Console.WriteLine("‚úÖ –ü—ñ—Å–Ω—é –≤–∏–¥–∞–ª–µ–Ω–æ (—è–∫—â–æ –≤–æ–Ω–∞ –±—É–ª–∞).");
            }
        }
        else
        {
            Console.WriteLine("‚ö†Ô∏è –î–∏—Å–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }
    }

    private static void ViewCatalog()
    {
        if (catalog.Count == 0)
        {
            Console.WriteLine("üìÅ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π.");
            return;
        }

        foreach (var entry in catalog.Values)
        {
            Console.WriteLine(entry.ToString());
        }
    }

    private static void ViewDisc()
    {
        Console.Write("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–∏—Å–∫–∞: ");
        string? name = Console.ReadLine();
        if (string.IsNullOrWhiteSpace(name)) return;

        if (catalog.TryGetValue(name, out MusicDisc? disc))
        {
            Console.WriteLine(disc.ToString());
        }
        else
        {
            Console.WriteLine("‚ö†Ô∏è –î–∏—Å–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }
    }

    private static void SearchByArtist()
    {
        Console.Write("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è –¥–ª—è –ø–æ—à—É–∫—É: ");
        string? artist = Console.ReadLine();
        if (string.IsNullOrWhiteSpace(artist)) return;

        bool found = false;
        foreach (var disc in catalog.Values)
        {
            foreach (var song in disc.GetSongs())
            {
                if (song.Artist.Equals(artist, StringComparison.OrdinalIgnoreCase))
                {
                    Console.WriteLine($"[{disc.Name}] {song}");
                    found = true;
                }
            }
        }
        
        if (!found)
        {
            Console.WriteLine("üîç –ü—ñ—Å–µ–Ω—å —Ü—å–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }
    }
}
